{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/streams/StreamEdit.js\";\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport React from 'react'; // URL-based selection implementation, done by adding :id to StreamEdit, StreamDelete, StreamShow\n\nvar StreamEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamEdit, _React$Component);\n\n  function StreamEdit() {\n    _classCallCheck(this, StreamEdit);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamEdit).apply(this, arguments));\n  }\n\n  _createClass(StreamEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStream(this.props.match.params.id); // Done so component fetches its own data\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"StreamEdit\");\n    }\n  }]);\n\n  return StreamEdit;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps)(StreamEdit);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/streams/StreamEdit.js"],"names":["connect","fetchStream","React","StreamEdit","props","match","params","id","console","log","Component","mapStateToProps","state","ownProps","stream","streams"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;IAEMC,U;;;;;;;;;;;;;wCACkB;AAChB,WAAKC,KAAL,CAAWH,WAAX,CAAuB,KAAKG,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C,EADgB,CAEhB;AACH;;;6BAEQ;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;;;EAToBF,KAAK,CAACQ,S;;AAY/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AAACC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcF,QAAQ,CAACR,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAT,GAAP;AACH,CAFD;;AAIA,eAAeP,OAAO,CAACW,eAAD,CAAP,CAAyBR,UAAzB,CAAf","sourcesContent":["import {connect} from 'react-redux';\nimport {fetchStream} from '../../actions';\nimport React from 'react';\n// URL-based selection implementation, done by adding :id to StreamEdit, StreamDelete, StreamShow\n\nclass StreamEdit extends React.Component {\n    componentDidMount() {\n        this.props.fetchStream(this.props.match.params.id);\n        // Done so component fetches its own data\n    }\n\n    render() {\n        console.log(this.props);\n        return <div>StreamEdit</div>;\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {stream: state.streams[ownProps.match.params.id]};\n}\n\nexport default connect(mapStateToProps)(StreamEdit);"]},"metadata":{},"sourceType":"module"}