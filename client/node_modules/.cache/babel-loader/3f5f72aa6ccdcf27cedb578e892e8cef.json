{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  // Constructor used to get a reference to the video element\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Follow-up render build player\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Code to stop player when stream is stopped\n      this.player.destroy();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      // For edge case if page is loaded but access to stream has not been given/created\n      if (this.player || !this.props.stream) {\n        return;\n      } // Code for player, only setup player after appropriate stream has been fetched\n\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;IAEMC,U;;;;;AACF;AACA,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AACA,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAFe;AAGlB;;;;wCAEmB;AAAA,UACTC,EADS,GACH,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADd,CACTF,EADS;AAEhB,WAAKH,KAAL,CAAWH,WAAX,CAAuBM,EAAvB;AACA,WAAKG,WAAL;AACH;;;yCAEoB;AACjB;AACA,WAAKA,WAAL;AACH;;;2CAEsB;AACnB;AACA,WAAKC,MAAL,CAAYC,OAAZ;AACH;;;kCAEa;AACV;AACA,UAAI,KAAKD,MAAL,IAAe,CAAC,KAAKP,KAAL,CAAWS,MAA/B,EAAuC;AACnC;AACH,OAJS,CAKV;;;AALU,UAMHN,EANG,GAMG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MANpB,CAMHF,EANG;AAOV,WAAKI,MAAL,GAAcT,GAAG,CAACY,YAAJ,CAAiB;AAC3BC,QAAAA,IAAI,EAAE,KADqB;AAE3BC,QAAAA,GAAG,uCAAgCT,EAAhC;AAFwB,OAAjB,CAAd;AAIA,WAAKI,MAAL,CAAYM,kBAAZ,CAA+B,KAAKZ,QAAL,CAAca,OAA7C;AACA,WAAKP,MAAL,CAAYQ,IAAZ;AACH;;;6BAEQ;AACL,UAAI,CAAC,KAAKf,KAAL,CAAWS,MAAhB,EAAwB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;;AAHI,+BAKwB,KAAKT,KAAL,CAAWS,MALnC;AAAA,UAKEO,KALF,sBAKEA,KALF;AAAA,UAKSC,WALT,sBAKSA,WALT;AAOL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,GAAG,EAAE,KAAKhB,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAAlC;AAAmD,QAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHJ,CADJ;AAOH;;;;EApDoBtB,KAAK,CAACwB,S;;AAuD/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AAACb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAT,GAAP;AACH,CAFD;;AAIA,eAAeP,OAAO,CAACwB,eAAD,EAAkB;AAACvB,EAAAA,WAAW,EAAXA;AAAD,CAAlB,CAAP,CAAwCE,UAAxC,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {fetchStream} from '../../actions';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component {\n    // Constructor used to get a reference to the video element\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.fetchStream(id);\n        this.buildPlayer();\n    }\n\n    componentDidUpdate() {\n        // Follow-up render build player\n        this.buildPlayer();\n    }\n\n    componentWillUnmount() {\n        // Code to stop player when stream is stopped\n        this.player.destroy();\n    }\n\n    buildPlayer() {\n        // For edge case if page is loaded but access to stream has not been given/created\n        if (this.player || !this.props.stream) {\n            return;\n        }\n        // Code for player, only setup player after appropriate stream has been fetched\n        const {id} = this.props.match.params;\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        });\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render() {\n        if (!this.props.stream) {\n            return <div>Loading...</div>;\n        }\n\n        const {title, description} = this.props.stream;\n        \n        return (\n            <div>\n                <video ref={this.videoRef} style={{width: '100%'}} controls={true}/>\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {stream: state.streams[ownProps.match.params.id]};\n};\n\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}