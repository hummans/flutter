{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/streams/StreamEdit.js\";\nimport { connect } from 'react-redux';\nimport React from 'react'; // URL-based selection implementation, done by adding :id to StreamEdit, StreamDelete, StreamShow\n// Should fetch its own data\n\nvar StreamEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamEdit, _React$Component);\n\n  function StreamEdit() {\n    _classCallCheck(this, StreamEdit);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamEdit).apply(this, arguments));\n  }\n\n  _createClass(StreamEdit, [{\n    key: \"render\",\n    value: function render() {\n      console.log(props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, \"StreamEdit\");\n    }\n  }]);\n\n  return StreamEdit;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps)(StreamEdit);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/streams/StreamEdit.js"],"names":["connect","React","StreamEdit","console","log","props","Component","mapStateToProps","state","ownProps","stream","streams","match","params","id"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;IACMC,U;;;;;;;;;;;;;6BACO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;;;EAJoBJ,KAAK,CAACK,S;;AAO/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AAACC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcF,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAT,GAAP;AACH,CAFD;;AAIA,eAAed,OAAO,CAACO,eAAD,CAAP,CAAyBL,UAAzB,CAAf","sourcesContent":["import {connect} from 'react-redux';\nimport React from 'react';\n// URL-based selection implementation, done by adding :id to StreamEdit, StreamDelete, StreamShow\n\n// Should fetch its own data\nclass StreamEdit extends React.Component {\n    render() {\n        console.log(props);\n        return <div>StreamEdit</div>;\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {stream: state.streams[ownProps.match.params.id]};\n}\n\nexport default connect(mapStateToProps)(StreamEdit);"]},"metadata":{},"sourceType":"module"}