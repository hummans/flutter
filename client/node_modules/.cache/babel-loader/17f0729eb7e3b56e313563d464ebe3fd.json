{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      // String interpolation; if two parameters are true, proceed with ternary expression\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    } // Normally onSubmit would refer to {this.onSubmit} but Redux form handles it differently\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // Only runs if user did not input a title\n    errors.title = 'You must enter a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","StreamCreate","renderInput","input","label","meta","className","error","touched","renderError","formValues","console","log","props","handleSubmit","onSubmit","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;IAEMC,Y;;;;;;;;;;;;;;;;;;UAWFC,W,GAAc,gBAA0B;AAAA,UAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,UAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,UAAVC,IAAU,QAAVA,IAAU;AACpC;AACA,UAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAsC,EAAlD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAIK,MAAKM,WAAL,CAAiBJ,IAAjB,CAJL,CADJ;AAQH,K;;;;;;;uCArB4B;AAAA,UAAhBE,KAAgB,SAAhBA,KAAgB;AAAA,UAAVC,OAAU,SAAVA,OAAU;;AACzB,UAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ;;;6BAeQG,U,EAAY;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH,K,CAED;;;;6BACS;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKb,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EArCsBL,KAAK,CAACmB,S;;AAwCjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACP,UAAD,EAAgB;AAC7B,MAAMQ,MAAM,GAAG,EAAf;;AACA,MAAI,CAACR,UAAU,CAACS,KAAhB,EAAuB;AACnB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,yBAAf;AACH;;AACD,MAAI,CAACT,UAAU,CAACU,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,+BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CAVD;;AAYA,eAAenB,SAAS,CAAC;AACrBsB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {connect} from 'react-redux';\n\nclass StreamCreate extends React.Component {\n    renderError({error,touched}) {\n        if (touched && error) {\n            return (\n                <div className='ui error message'>\n                    <div className='header'>{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input, label, meta}) => {\n        // String interpolation; if two parameters are true, proceed with ternary expression\n        const className = `field ${meta.error && meta.touched ? 'error': ''}`;\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete='off'/>\n                {/* <div>{meta.error}</div> */}\n                {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit(formValues) {\n        console.log(formValues);\n    }\n\n    // Normally onSubmit would refer to {this.onSubmit} but Redux form handles it differently\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n                <Field name='title' component={this.renderInput} label='Enter Title'/>\n                <Field name='description' component={this.renderInput} label='Enter Description'/>\n                <button className='ui button primary'>Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        // Only runs if user did not input a title\n        errors.title = 'You must enter a title.';\n    }\n    if (!formValues.description) {\n        errors.description = 'You must enter a description.';\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate: validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}