{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, meta.error));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    } // Normally onSubmit would refer to {this.onSubmit} but Redux form handles it differently\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        class: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // Only runs if user did not input a title\n    errors.title = 'You must enter a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","input","label","meta","error","formValues","console","log","props","handleSubmit","onSubmit","renderInput","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;IAEMC,Y;;;;;;;;;;;;;sCACgC;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,KAAc,QAAdA,KAAc;AAAA,UAAPC,IAAO,QAAPA,IAAO;AAC9B,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAME,IAAI,CAACC,KAAX,CAHJ,CADJ;AAOH;;;6BAEQC,U,EAAY;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH,K,CAED;;;;6BACS;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,KAAK,EAAC,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EAxBsBd,KAAK,CAACe,S;;AA2BjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACR,UAAD,EAAgB;AAC7B,MAAMS,MAAM,GAAG,EAAf;;AACA,MAAI,CAACT,UAAU,CAACU,KAAhB,EAAuB;AACnB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,yBAAf;AACH;;AACD,MAAI,CAACV,UAAU,CAACW,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,+BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CAVD;;AAYA,eAAef,SAAS,CAAC;AACrBkB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZb,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\nclass StreamCreate extends React.Component {\n    renderInput({input, label, meta}) {\n        return (\n            <div className='field'>\n                <label>{label}</label>\n                <input {...input} autoComplete='off'/>\n                <div>{meta.error}</div>\n            </div>\n        );\n    }\n\n    onSubmit(formValues) {\n        console.log(formValues);\n    }\n\n    // Normally onSubmit would refer to {this.onSubmit} but Redux form handles it differently\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} class='ui form'>\n                <Field name='title' component={this.renderInput} label='Enter Title'/>\n                <Field name='description' component={this.renderInput} label='Enter Description'/>\n                <button className='ui button primary'>Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        // Only runs if user did not input a title\n        errors.title = 'You must enter a title.';\n    }\n    if (!formValues.description) {\n        errors.description = 'You must enter a description.';\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate: validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}