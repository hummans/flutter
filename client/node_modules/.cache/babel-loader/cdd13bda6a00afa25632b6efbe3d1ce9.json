{"ast":null,"code":"import _classCallCheck from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thurman/CS/React/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thurman/CS/React/streams/client/src/components/GoogleAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nvar GoogleAuth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GoogleAuth, _React$Component);\n\n  function GoogleAuth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GoogleAuth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleAuth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onAuthChange = function (isSignedIn) {\n      // Called whenever user authentication status changes\n      if (isSignedIn) {\n        _this.props.signIn();\n      } else {\n        _this.props.signOut();\n      }\n    };\n\n    _this.onSignInClick = function () {\n      _this.auth.signIn();\n    };\n\n    _this.onSignOutClick = function () {\n      _this.auth.signOut();\n    };\n\n    return _this;\n  }\n\n  _createClass(GoogleAuth, [{\n    key: \"componentDidMount\",\n    // Only want to initialize library once when the class is rendered to the screen\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      window.gapi.load('client:auth2', function () {\n        window.gapi.client.init({\n          clientId: '305103598371-84lhlc1c1pik0bftgqi86ou70ott5fd9.apps.googleusercontent.com',\n          scope: 'email'\n        }).then(function () {\n          //client.init returns a promise, invoke arrow function after library has been initiated\n          _this2.auth = window.gapi.auth2.getAuthInstance();\n\n          _this2.onAuthChange(_this2.auth.isSignedIn());\n\n          _this2.auth.isSignedIn.listen(_this2.onAuthChange);\n        });\n      });\n    }\n  }, {\n    key: \"renderAuthButton\",\n    value: function renderAuthButton() {\n      if (this.props.isSignedIn === null) {\n        return null;\n      } else if (this.props.isSignedIn) {\n        return React.createElement(\"button\", {\n          onClick: this.onSignOutClick,\n          className: \"ui red google button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }), \"Sign Out\");\n      } else {\n        return React.createElement(\"button\", {\n          onClick: this.onSignInClick,\n          className: \"ui red google button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }), \"Sign In With Google\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.renderAuthButton());\n    }\n  }]);\n\n  return GoogleAuth;\n}(React.Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn: signIn,\n  signOut: signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/thurman/CS/React/streams/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","onAuthChange","isSignedIn","props","onSignInClick","auth","onSignOutClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","Component","mapStateToProps","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,YAA9B;;IAEMC,U;;;;;;;;;;;;;;;;;;UAeFC,Y,GAAe,UAACC,UAAD,EAAgB;AAC3B;AACA,UAAIA,UAAJ,EAAgB;AACZ,cAAKC,KAAL,CAAWL,MAAX;AACH,OAFD,MAEO;AACH,cAAKK,KAAL,CAAWJ,OAAX;AACH;AACJ,K;;UAEDK,a,GAAgB,YAAM;AAClB,YAAKC,IAAL,CAAUP,MAAV;AACH,K;;UAEDQ,c,GAAiB,YAAM;AACnB,YAAKD,IAAL,CAAUN,OAAV;AACH,K;;;;;;;AA7BD;wCACoB;AAAA;;AAChBQ,MAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,YAAM;AACnCF,QAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACpBC,UAAAA,QAAQ,EAAE,0EADU;AAEpBC,UAAAA,KAAK,EAAE;AAFa,SAAxB,EAGGC,IAHH,CAGQ,YAAM;AAAE;AACZ,UAAA,MAAI,CAACT,IAAL,GAAYE,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;;AACA,UAAA,MAAI,CAACf,YAAL,CAAkB,MAAI,CAACI,IAAL,CAAUH,UAAV,EAAlB;;AACA,UAAA,MAAI,CAACG,IAAL,CAAUH,UAAV,CAAqBe,MAArB,CAA4B,MAAI,CAAChB,YAAjC;AACH,SAPD;AAQH,OATD;AAUH;;;uCAmBkB;AACf,UAAI,KAAKE,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAC9B,eACI;AAAQ,UAAA,OAAO,EAAE,KAAKI,cAAtB;AAAsC,UAAA,SAAS,EAAC,sBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,aADJ;AAMH,OAPM,MAOA;AACH,eACI;AAAQ,UAAA,OAAO,EAAE,KAAKF,aAAtB;AAAqC,UAAA,SAAS,EAAC,sBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,wBADJ;AAMH;AACJ;;;6BAEQ;AACL,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKc,gBAAL,EAAN,CAAP;AACH;;;;EAtDoBtB,KAAK,CAACuB,S;;AAuD9B;;AAED,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AAACnB,IAAAA,UAAU,EAAEmB,KAAK,CAAChB,IAAN,CAAWH;AAAxB,GAAP;AACH,CAFD;;AAIA,eAAeL,OAAO,CAACuB,eAAD,EAAkB;AAACtB,EAAAA,MAAM,EAANA,MAAD;AAASC,EAAAA,OAAO,EAAPA;AAAT,CAAlB,CAAP,CAA4CC,UAA5C,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {signIn, signOut} from '../actions';\n\nclass GoogleAuth extends React.Component {\n    // Only want to initialize library once when the class is rendered to the screen\n    componentDidMount() {\n        window.gapi.load('client:auth2', () => {\n            window.gapi.client.init({\n                clientId: '305103598371-84lhlc1c1pik0bftgqi86ou70ott5fd9.apps.googleusercontent.com',\n                scope: 'email'\n            }).then(() => { //client.init returns a promise, invoke arrow function after library has been initiated\n                this.auth = window.gapi.auth2.getAuthInstance();\n                this.onAuthChange(this.auth.isSignedIn());\n                this.auth.isSignedIn.listen(this.onAuthChange);\n            });\n        });\n    }\n\n    onAuthChange = (isSignedIn) => {\n        // Called whenever user authentication status changes\n        if (isSignedIn) {\n            this.props.signIn();\n        } else {\n            this.props.signOut();\n        }\n    };\n\n    onSignInClick = () => {\n        this.auth.signIn();\n    };\n\n    onSignOutClick = () => {\n        this.auth.signOut();\n    };\n\n    renderAuthButton() {\n        if (this.props.isSignedIn === null) {\n            return null;\n        } else if (this.props.isSignedIn) {\n            return (\n                <button onClick={this.onSignOutClick} className='ui red google button'>\n                    <i className='google icon'/>\n                    Sign Out\n                </button>\n            );\n        } else {\n            return (\n                <button onClick={this.onSignInClick} className='ui red google button'>\n                    <i className='google icon'/>\n                    Sign In With Google\n                </button>\n            );\n        }\n    };\n\n    render() {\n        return <div>{this.renderAuthButton()}</div>\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {isSignedIn: state.auth.isSignedIn};\n};\n\nexport default connect(mapStateToProps, {signIn, signOut})(GoogleAuth);"]},"metadata":{},"sourceType":"module"}